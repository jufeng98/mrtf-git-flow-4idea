<!--suppress PluginXmlCapitalization -->
<idea-plugin>
    <id>com.github.xiaolyuh.mrtf-git-flow-4idea</id>
    <name>GitFlowPlus</name>
    <vendor email="xiaolyuh@163.com" url="https://xiaolyuh.blog.csdn.net/article/details/105150446">
        Author:汪雨浩, enhance by:梁煜东
    </vendor>

    <description>
        <![CDATA[
        This is a branch management plugin for the <a href="https://xiaolyuh.blog.csdn.net/article/details/105180250"> mrtf git flow </a> (master, release, test, feature) process <a href="https://xiaolyuh.blog.csdn.net/article/details/105150446"> Usage Guide </a>. <br>
        The biggest advantage is to reduce the operation of switching branches and merging branches in the agile development process, and reduce the labor cost of branch management.<br>     
     <br>
     The main functions are as follows: <br>
      1. Plug-in configuration files can be added to GIT version management and shared within the team; <br>
      2. New development branch and repair branch based on origin / master; <br>
      3. Rebuild test branch and release branch based on origin / master; <br>
      4. After the development is completed, merge the development branch into the test branch; <br>
      4. After the test is completed, the development branch is merged into the release branch, and the release branch is locked; <br>
      5. After the release is completed, merge the release branch into the origin / master branch; <br>
      6. Failure to release will unlock the release branch; <br>
      7. Only those who lock the release branch can click [release complete] and [release failed]; <br>
      8. All executed git commands can be viewed in "Event Log"; <br>
      9. Support to initiate Merge Request locally; <br>

        <br>
    这是一个适用于<a href="https://xiaolyuh.blog.csdn.net/article/details/105180250">mrtf git flow</a> (master,release,test,feature) 流程的分支管理插件 <a href="https://xiaolyuh.blog.csdn.net/article/details/105150446">使用指南</a>。<br>
    最大优势是减少敏捷开发过程中切换分支和合并分支的操作，降低分支管理的人力成本。<br>
     <br>
    主要功能如下：<br>
     1. 插件配置文件可以加入GIT版本管理，在团队内部共享； <br>
     2. 基于origin/master新建开发分支和修复分支； <br>
     3. 基于origin/master重建测试分支和发布分支； <br>
     4. 开发完成后将开发分支合并到测试分支； <br>
     4. 测试完成后将开发分支合并到发布分支，并锁定发布分支； <br>
     5. 发布完成后将发布分支合并到origin/master分支； <br>
     6. 发布失败将解除发布分支的锁定； <br>
     7. 只有锁定发布分支的人才能点[发布完成]和[发布失败]； <br>
     8. 所有执行的git命令都可以在"Event Log"查看； <br>
     9. 支持在本地发起Merge Request； <br>
    ]]>
    </description>

    <depends>com.intellij.modules.vcs</depends>
    <depends>com.intellij.tasks</depends>
    <depends>Git4Idea</depends>
    <depends>com.intellij.java</depends>
    <depends>com.intellij.properties</depends>
    <depends optional="true" config-file="gitflow-plus-dbn.xml">DBN</depends>
    <depends optional="true" config-file="gitflow-plus-cool-request.xml">com.hxl.plugin.cool-request</depends>

    <extensions defaultExtensionNs="com.intellij">
        <highlightErrorFilter implementation="com.github.xiaolyuh.suppress.MyHighlightErrorFilter"/>
        <lang.inspectionSuppressor language="JSON"
                                   implementationClass="com.github.xiaolyuh.suppress.JsonInspectionSuppressor"/>
        <lang.inspectionSuppressor language="JAVA"
                                   implementationClass="com.github.xiaolyuh.suppress.JavaInspectionSuppressor"/>

        <statusBarWidgetFactory implementation="com.github.xiaolyuh.ui.GitFlowPlusStatusBarWidgetFactory"
                                id="GitFlowPlusStatusBarWidgetFactory" order="last"/>

        <!-- Add your extensions here -->
        <applicationService serviceInterface="com.github.xiaolyuh.service.GitFlowPlus"
                            serviceImplementation="com.github.xiaolyuh.service.impl.GitFlowPlusImpl"/>

        <!-- Add your extensions here -->
        <applicationService serviceInterface="com.github.xiaolyuh.service.Git"
                            serviceImplementation="com.github.xiaolyuh.service.impl.GitImpl"/>

        <notificationGroup id="GitflowPlus.STICKY_BALLOON"
                           isLogByDefault="true"
                           displayType="STICKY_BALLOON"/>

        <notificationGroup id="GitflowPlus.NONE"
                           isLogByDefault="true"
                           displayType="NONE"/>

        <toolWindow factoryClass="com.github.xiaolyuh.ui.GitFlowToolWindow"
                    icon="/icons/icon.svg"
                    anchor="right"
                    doNotActivateOnStart="true"
                    id="GitflowPlus.toolWindow"/>

        <typedHandler implementation="com.github.xiaolyuh.handler.GitFlowPlusTypedHandler"/>

        <projectConfigurable
                parentId="tools"
                instance="com.github.xiaolyuh.ui.AppSettingsConfigurable"
                id="GitFlowPlus.AppSettingsConfigurable"
                displayName="GitFlowPlus配置"/>

        <localInspection language="JAVA"
                         groupPath="Java"
                         groupBundle="messages.ui"
                         groupKey="inspection.group.names.gitflowplus"
                         enabledByDefault="true"
                         level="WARNING"
                         implementationClass="com.github.xiaolyuh.inspection.FieldNameInspection"
                         displayName="字段名不能以下划线开头"/>

        <codeInsight.lineMarkerProvider language="JAVA"
                                        implementationClass="com.github.xiaolyuh.gutter.InjectLineMarkerProvider"/>

        <completion.contributor language="JAVA"
                                order="first"
                                implementationClass="com.github.xiaolyuh.completion.GitFlowCompletionContributor"/>

        <psi.referenceContributor language="JAVA"
                                  implementation="com.github.xiaolyuh.navigation.FilePsiReferenceContributor"/>

        <psi.referenceContributor language="JAVA"
                                  implementation="com.github.xiaolyuh.spring.ValueAnnotationReferenceContributor"/>

        <psi.referenceContributor language="XML"
                                  implementation="com.github.xiaolyuh.spring.XmlReferenceContributor"/>

        <lang.foldingBuilder
                language="JAVA"
                implementationClass="com.github.xiaolyuh.spring.ValueAnnotationFoldingBuilder"/>

        <codeInsight.lineMarkerProvider
                language="JAVA"
                implementationClass="com.github.xiaolyuh.spring.ValueAnnotationLineMarkerProvider"/>
        <codeInsight.lineMarkerProvider
                language="Properties"
                implementationClass="com.github.xiaolyuh.apollo.ApolloLineMarkerProvider"/>

        <fileType
                name="Simple File"
                implementationClass="com.github.xiaolyuh.cls.step2.SimpleFileType"
                fieldName="INSTANCE"
                language="Simple"
                extensions="simple"/>
        <lang.parserDefinition
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step4.SimpleParserDefinition"/>
        <lang.syntaxHighlighterFactory
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step5.SimpleSyntaxHighlighterFactory"/>
        <colorSettingsPage
                implementation="com.github.xiaolyuh.cls.step5.SimpleColorSettingsPage"/>
        <annotator
                language="JAVA"
                implementationClass="com.github.xiaolyuh.cls.step7.SimpleAnnotator"/>
        <codeInsight.lineMarkerProvider
                language="JAVA"
                implementationClass="com.github.xiaolyuh.cls.step8.SimpleLineMarkerProvider"/>
        <completion.contributor
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step9.SimpleCompletionContributor"/>
        <psi.referenceContributor language="JAVA"
                                  implementation="com.github.xiaolyuh.cls.step10.SimpleReferenceContributor"/>
        <lang.refactoringSupport
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step10.SimpleRefactoringSupportProvider"/>
        <lang.findUsagesProvider
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step11.SimpleFindUsagesProvider"/>
        <lang.foldingBuilder
                language="JAVA"
                implementationClass="com.github.xiaolyuh.cls.step12.SimpleFoldingBuilder"/>
        <gotoSymbolContributor
                implementation="com.github.xiaolyuh.cls.step13.SimpleChooseByNameContributor"/>
        <lang.psiStructureViewFactory
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step14.SimpleStructureViewFactory"/>
        <navbar implementation="com.github.xiaolyuh.cls.step15.SimpleStructureAwareNavbar"/>
        <lang.formatter
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step16.SimpleFormattingModelBuilder"/>
        <codeStyleSettingsProvider
                implementation="com.github.xiaolyuh.cls.step17.SimpleCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider
                implementation="com.github.xiaolyuh.cls.step17.SimpleLanguageCodeStyleSettingsProvider"/>
        <lang.commenter
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step18.SimpleCommenter"/>
        <lang.documentationProvider
                language="Simple"
                implementationClass="com.github.xiaolyuh.cls.step20.SimpleDocumentationProvider"/>
        <spellchecker.support language="Simple"
                              implementationClass="com.github.xiaolyuh.cls.step21.SimpleSpellcheckingStrategy"/>
        <!--        <multiHostInjector-->
        <!--                implementation="com.github.xiaolyuh.cls.SimpleLanguageInjectionContributor"/>-->


        <fileType
                name="Pointcut Expression"
                implementationClass="com.github.xiaolyuh.pcel.PointcutExpressionFileType"
                fieldName="INSTANCE"
                language="PointcutExpression"
                extensions="pcel"/>
        <lang.parserDefinition
                language="PointcutExpression"
                implementationClass="com.github.xiaolyuh.pcel.parser.PointcutExpressionParserDefinition"/>
        <lang.syntaxHighlighterFactory
                language="PointcutExpression"
                implementationClass="com.github.xiaolyuh.pcel.highlight.PointcutExpressionSyntaxHighlighterFactory"/>
        <colorSettingsPage
                implementation="com.github.xiaolyuh.pcel.highlight.PointcutExpressionColorSettingsPage"/>
        <languageInjectionContributor
                implementationClass="com.github.xiaolyuh.pcel.inject.PointcutExpressionInjectionContributor"
                language="JAVA"/>
        <codeInsight.lineMarkerProvider
                language="UAST"
                implementationClass="com.github.xiaolyuh.spring.AopLineMarkerProvider"/>
        <annotator
                language="PointcutExpression"
                implementationClass="com.github.xiaolyuh.spring.AopAnnotator"/>
        <completion.contributor
                language="PointcutExpression"
                implementationClass="com.github.xiaolyuh.spring.AopCompletionContributor"/>
        <psi.referenceContributor language="PointcutExpression"
                                  implementation="com.github.xiaolyuh.spring.AopReferenceContributor"/>
        <lang.elementManipulator forClass="com.github.xiaolyuh.pcel.psi.AopExpr"
                                 implementationClass="com.github.xiaolyuh.spring.AopExprManipulator"/>

        <fileType
                name="SpEL"
                implementationClass="com.github.xiaolyuh.spel.SpelFileType"
                fieldName="INSTANCE"
                language="SpEL"
                extensions="spel"/>
        <lang.parserDefinition
                language="SpEL"
                implementationClass="com.github.xiaolyuh.spel.parser.SpelParserDefinition"/>
        <lang.syntaxHighlighterFactory
                language="SpEL"
                implementationClass="com.github.xiaolyuh.spel.highlight.SpelSyntaxHighlighterFactory"/>
        <colorSettingsPage
                implementation="com.github.xiaolyuh.spel.highlight.SpelColorSettingsPage"/>
        <multiHostInjector
                implementation="com.github.xiaolyuh.spel.inject.SpelMultiHostInjector"/>
        <psi.referenceContributor language="SpEL"
                                  implementation="com.github.xiaolyuh.spring.SpelReferenceContributor"/>


        <fileType
                name="SQL"
                implementationClass="com.github.xiaolyuh.sql.SqlFileType"
                fieldName="INSTANCE"
                language="sql"
                extensions="mysql"/>
        <lang.parserDefinition
                language="sql"
                implementationClass="com.github.xiaolyuh.sql.parser.SqlParserDefinition"/>
        <lang.ast.factory language="sql" implementationClass="com.github.xiaolyuh.sql.SqlASTFactory"/>
        <lang.syntaxHighlighterFactory
                language="sql"
                implementationClass="com.github.xiaolyuh.sql.highlight.SqlSyntaxHighlighterFactory"/>
        <colorSettingsPage
                implementation="com.github.xiaolyuh.sql.highlight.SqlColorSettingsPage"/>
        <highlightVisitor implementation="com.github.xiaolyuh.sql.highlight.SqlRainbowVisitor"/>
        <lang.braceMatcher language="sql"
                           implementationClass="com.github.xiaolyuh.sql.bracematcher.SqlPairedBraceMatcher"/>
        <quoteHandler fileType="SQL" className="com.github.xiaolyuh.sql.quotehandler.SqlQuoteHandler"/>
        <lang.namesValidator language="sql" implementationClass="com.github.xiaolyuh.sql.name.SqlNamesValidator"/>
        <multiHostInjector
                implementation="com.github.xiaolyuh.sql.inject.SqlMultiHostInjector"/>
        <psi.referenceContributor language="sql"
                                  implementation="com.github.xiaolyuh.sql.reference.SqlReferenceContributor"/>
        <lang.findUsagesProvider language="sql"
                                 implementationClass="com.github.xiaolyuh.sql.usage.SqlFindUsageProvider"/>
        <lang.commenter
                language="sql"
                implementationClass="com.github.xiaolyuh.sql.commenter.SqlCommenter"/>
        <defaultLiveTemplates file="/liveTemplates/gfp-sql.xml"/>
        <liveTemplateContext implementation="com.github.xiaolyuh.sql.livetempate.SqlTemplateContextType"/>
        <lang.formatter
                language="sql"
                implementationClass="com.github.xiaolyuh.sql.formatter.SqlFormattingModelBuilder"/>
        <codeStyleSettingsProvider
                implementation="com.github.xiaolyuh.sql.codestyle.SqlCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider
                implementation="com.github.xiaolyuh.sql.codestyle.SqlLanguageCodeStyleSettingsProvider"/>
        <preFormatProcessor implementation="com.github.xiaolyuh.sql.formatter.SqlFormatPreprocessor"/>
        <lang.foldingBuilder language="sql" implementationClass="com.github.xiaolyuh.sql.folding.SqlFoldingBuilder"/>
        <spellchecker.support language="sql"
                              implementationClass="com.github.xiaolyuh.sql.spell.SqlSpellcheckerStrategy"/>
        <lang.psiStructureViewFactory language="sql"
                                      implementationClass="com.github.xiaolyuh.sql.structure.SqlStructureViewBuilderProvider"/>
        <lang.elementManipulator forClass="com.github.xiaolyuh.sql.psi.SqlStatement"
                                 implementationClass="com.github.xiaolyuh.sql.manipulator.SqlManipulator"/>


        <fileType
                name="HTTP"
                implementationClass="com.github.xiaolyuh.http.HttpFileType"
                fieldName="INSTANCE"
                language="http"
                extensions="http"/>
        <lang.parserDefinition
                language="http"
                implementationClass="com.github.xiaolyuh.http.parser.HttpParserDefinition"/>
        <lang.ast.factory language="http" implementationClass="com.github.xiaolyuh.http.HttpASTFactory"/>
        <lang.syntaxHighlighterFactory
                language="http"
                implementationClass="com.github.xiaolyuh.http.highlight.HttpSyntaxHighlighterFactory"/>
        <multiHostInjector
                implementation="com.github.xiaolyuh.http.inject.HttpInjectionContributor"/>
        <runLineMarkerContributor language="http"
                                  implementationClass="com.github.xiaolyuh.http.gutter.HttpRunLineMarkerContributor"/>
        <toolWindow id="Http Execution"
                    icon="com.dbn.common.icon.Icons.WINDOW_EXECUTION_CONSOLE"
                    anchor="right"
                    canCloseContents="true"
                    factoryClass="com.github.xiaolyuh.http.ui.HttpExecutionConsoleToolWindowFactory"/>
        <configurationType implementation="com.github.xiaolyuh.http.runconfig.HttpConfigurationType"/>
        <runDashboardCustomizer implementation="com.github.xiaolyuh.http.dashboard.HttpRunDashboardCustomizer"
                                id="httpRunDashboardCustomizer"/>
    </extensions>

    <projectListeners>
        <listener
                class="com.github.xiaolyuh.listener.GitFlowPlusListener"
                topic="com.intellij.openapi.project.ProjectManagerListener"/>
        <listener topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"
                  class="com.github.xiaolyuh.http.editor.HttpEditorListener"/>
        <listener topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"
                  class="com.github.xiaolyuh.sql.listener.SqlEditorListener"/>
    </projectListeners>

    <applicationListeners>
        <listener
                class="com.github.xiaolyuh.listener.FileEditorListener"
                topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"/>
    </applicationListeners>

    <actions>
        <!-- Add your actions here -->
        <group id="GitFlowPlus.Menu" text="GitFlowPlus" description="GIT分支管理" icon="/icons/icon.svg"
               popup="true">

            <add-to-group group-id="MainToolBar" anchor="last"/>

            <!--配置管理-->
            <action id="GitFlowPlus.InitPluginAction" class="com.github.xiaolyuh.action.InitPluginAction"
                    text="初始化配置" description="初始化仓库配置，如果测试分支与发布分支不存在，将基于master新建"
                    icon="/icons/config.svg"/>
            <separator/>

            <!--新建分支-->
            <action id="GitFlowPlus.NewFeatureAction" class="com.github.xiaolyuh.action.NewFeatureAction"
                    text="新建开发分支" description="新建开发分支，并推送到远程仓库" icon="/icons/feature.svg"/>
            <action id="GitFlowPlus.NewHotFixAction" class="com.github.xiaolyuh.action.NewHotFixAction"
                    text="新建修复分支" description="新建修复分支，并推送到远程仓库" icon="/actions/quickfixBulb.svg"/>
            <separator/>

            <group id="GitFlowPlus.RebuildBranch" popup="true" text="重建分支"
                   class="com.github.xiaolyuh.action.RebuildActionGroup">
                <action id="GitFlowPlus.RebuildTestAction" class="com.github.xiaolyuh.action.RebuildTestAction"
                        text="重建测试分支" description="重建测试分支，并推送到远程仓库，原来的分支将被删除"
                        icon="/icons/test.svg"/>
                <action id="GitFlowPlus.RebuildReleaseAction" class="com.github.xiaolyuh.action.RebuildReleaseAction"
                        text="重建发布分支" description="重建发布分支，并推送到远程仓库，原来的分支将被删除"
                        icon="/icons/release.svg"/>
            </group>
            <separator/>

            <!--解决冲突-->
            <action id="GitFlowPlus.ResolveConflicts" class="com.github.xiaolyuh.action.GitResolveConflictsAction"
                    text="解决冲突" description="解决冲突"/>
            <separator/>

            <!--merge request-->
            <action id="GitFlowPlus.MergeRequestAction" class="com.github.xiaolyuh.action.MergeRequestAction"
                    text="Merge Request" description="发起 code review" icon="/icons/mergeToTest.svg">
            </action>
            <separator/>

            <action id="GitFlowPlus.DeleteBranchAction"
                    class="com.github.xiaolyuh.action.DeleteBranchAction" text="删除分支"
                    description="批量删除无效分支" icon="/actions/deleteTag.svg"/>
            <separator/>

            <!--发布流程-->
            <action id="GitFlowPlus.StartReleaseAction" class="com.github.xiaolyuh.action.StartReleaseAction"
                    text="开始发布" description="将当前开发分支合并到发布分支，加锁，防止再有开发分支合并到发布分支"
                    icon="/icons/start.svg"/>
            <action id="GitFlowPlus.FinishReleaseAction" class="com.github.xiaolyuh.action.FinishReleaseAction"
                    text="发布完成" description="解锁，并将发布分支合并到主干分支" icon="/icons/finished.svg"/>
            <action id="GitFlowPlus.FailureReleaseAction" class="com.github.xiaolyuh.action.FailureReleaseAction"
                    text="发布失败" description="解锁，这时新的开发分支可以合并到发布分支了" icon="/icons/failure.svg"/>
            <separator/>

            <!--提测-->
            <action id="GitFlowPlus.StartTestAction" class="com.github.xiaolyuh.action.StartTestAction"
                    text="提测" description="将当前开发分支合并到test分支" icon="/icons/mergeToTest.svg">
            </action>
            <separator/>

            <action id="GitFlowPlus.ServiceConsoleAction" class="com.github.xiaolyuh.action.ServiceConsoleAction"
                    text="连接服务控制台" description="连接 Kubesphere 服务的控制台" icon="/actions/show.svg">
            </action>
            <action id="GitFlowPlus.ServiceRunningShowAction" class="com.github.xiaolyuh.action.ServiceLogAction"
                    text="查看服务日志" description="查看 Kubesphere 服务的运行信息" icon="/actions/show.svg">
            </action>
            <separator/>

            <!--帮助-->
            <action id="GitFlowPlus.HelpAction" class="com.github.xiaolyuh.action.HelpAction"
                    text="帮助" description="帮助" icon="/icons/help.svg"/>
        </group>

        <action
                id="GitFlowPlus.HttpAction"
                class="com.github.xiaolyuh.http.action.HttpAction"
                text="http请求"
                description="执行http请求"
                icon="/icons/actionGroupNew.svg">
        </action>

        <action
                id="GitFlowPlus.EditorIllustrationAction"
                class="com.github.xiaolyuh.action.TranslateAction"
                text="翻译"
                description="翻译当前选择文本"
                icon="/icons/actionGroupNew.svg">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
        </action>
        <action
                id="GitFlowPlus.ArthasCommandAction"
                class="com.github.xiaolyuh.action.ArthasCommandAction"
                text="Arthas"
                description="Arthas watch命令"
                icon="/icons/actionGroupNew.svg">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
        </action>
    </actions>
</idea-plugin>